name: Pixel Builder

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:

permissions:
  actions: write
  contents: write

jobs:
  check-env:
    runs-on: windows-latest

    outputs:
      has_release: ${{ steps.release.outputs.has_release }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      release_name: ${{ steps.release.outputs.release_name }}
      cores: ${{ steps.cpu.outputs.cores }}

    steps:
      - name: Get CPU core count (Windows)
        id: cpu
        run: echo "cores=$env:NUMBER_OF_PROCESSORS" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Get latest release info
        id: release
        shell: bash
        run: |
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest)

          if echo "$response" | grep -q "Not Found"; then
            echo "has_release=false" >> $GITHUB_OUTPUT
          else
            echo "has_release=true" >> $GITHUB_OUTPUT
            echo "tag_name=$(echo "$response" | jq -r .tag_name)" >> $GITHUB_OUTPUT
            echo "release_name=$(echo "$response" | jq -r .name)" >> $GITHUB_OUTPUT
          fi

  print-env:
    runs-on: ubuntu-latest

    needs: check-env

    steps:
      - name: Print release info
        run: |
          if [ "${{ needs.check-env.outputs.has_release }}" = "true" ]; then
            echo "✅ Latest release tag: ${{ needs.check-env.outputs.tag_name }}"
            echo "✅ Release name: ${{ needs.check-env.outputs.release_name }}"
            echo "✅ Num of cores: ${{ needs.check-env.outputs.cores }}"
          else
            echo "⚠️ No releases found."
          fi

  build_starter:
    runs-on: windows-latest

    needs: check-env

    steps:
    - uses: actions/checkout@v5
      with:
        repository: JiaPai12138/VIP_exe
        token: ${{ secrets.LOK }}
        path: VIP_exe
        fetch-depth: 1
        show-progress: true

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Build
      working-directory: ${{ github.workspace }}\VIP_exe
      shell: cmd
      run: |
        copy /Y clang-cl.exe "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\Llvm\x64\bin\clang-cl.exe"
        copy /Y lld-link.exe "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\Llvm\x64\bin\lld-link.exe"

        msbuild PyStarter.sln /p:Configuration=Release /p:Platform=x64 /p:CLToolExe=clang-cl.exe /p:CLToolPath=${{ github.workspace }}\VIP_exe /m /verbosity:quiet

    - name: Strip exe
      working-directory: ${{ github.workspace }}\VIP_exe
      run: llvm-strip --strip-all .\x64\Release\PyStarter.exe

    - name: Rename with random vocab
      working-directory: ${{ github.workspace }}\VIP_exe
      shell: pwsh
      run: |
        $vocabFile = "${{ github.workspace }}\VIP_exe\vocab.txt"
        $exePath = "${{ github.workspace }}\VIP_exe\x64\Release\PyStarter.exe"
        $word = Get-Content -LiteralPath $vocabFile | Get-Random -Count 1
        $dir = Split-Path $exePath
        $newPath = Join-Path $dir "$word.exe"
        Rename-Item -LiteralPath $exePath -NewName $newPath

    - name: Compress & encrypt build with 7z
      run: |
        7z a -t7z -mmt -m0=LZMA2 -mx=3 -sccUTF-8 -ms=1g -mqs=on -p"${{ secrets.DICK }}" -mhe=on PyStarter.7z .\VIP_exe\x64\Release\*.exe

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: VIP_EXE
        path: PyStarter.7z
        retention-days: 1

  build_mk:
    runs-on: windows-latest

    needs: check-env

    steps:
    - uses: actions/checkout@v5
      with:
        repository: JiaPai12138/VIP_MK
        token: ${{ secrets.LOK }}
        path: VIP_MK
        fetch-depth: 1
        show-progress: true

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Build
      working-directory: ${{ github.workspace }}\VIP_MK
      shell: cmd
      run: |
        copy /Y clang-cl.exe "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\Llvm\x64\bin\clang-cl.exe"
        copy /Y lld-link.exe "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\Llvm\x64\bin\lld-link.exe"

        msbuild VIP_MK.sln /p:Configuration=Release /p:Platform=x64 /p:CLToolExe=clang-cl.exe /p:CLToolPath=${{ github.workspace }}\VIP_MK /m /verbosity:quiet

    - name: Strip
      working-directory: ${{ github.workspace }}\VIP_MK
      run: llvm-strip --strip-all .\x64\Release\MK_Helper.pyd

    - name: Compress & encrypt build with 7z
      run: |
        7z a -t7z -mmt -m0=LZMA2 -mx=3 -sccUTF-8 -ms=1g -mqs=on -p"${{ secrets.DICK }}" -mhe=on MK_Helper.7z .\VIP_MK\x64\Release\MK_Helper.pyd

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: VIP_MK
        path: MK_Helper.7z
        retention-days: 1

  build_plugin:
    runs-on: windows-latest

    needs: check-env

    steps:
    - uses: actions/checkout@v5
      with:
        repository: JiaPai12138/VIP_Plugin
        token: ${{ secrets.LOK }}
        path: VIP_Plugin
        fetch-depth: 1
        show-progress: true

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Build
      working-directory: ${{ github.workspace }}\VIP_Plugin\EVX
      shell: cmd
      run: |
        copy /Y clang-cl.exe "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\Llvm\x64\bin\clang-cl.exe"
        copy /Y lld-link.exe "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\Llvm\x64\bin\lld-link.exe"
        xcopy "..\include" "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\Llvm\lib\clang\19\include" /E /I /H /Y

        msbuild VIP.sln /p:Configuration=Release /p:Platform=x64 /p:CLToolExe=clang-cl.exe /p:CLToolPath=${{ github.workspace }}\VIP_Plugin\EVX /m /verbosity:quiet

    - name: Strip
      working-directory: ${{ github.workspace }}\VIP_Plugin\EVX
      run: llvm-strip --strip-all .\x64\Release\VipFrame59_vs.dll

    - name: Compress & encrypt build with 7z
      run: |
        7z a -t7z -mmt -m0=LZMA2 -mx=3 -sccUTF-8 -ms=1g -mqs=on -p"${{ secrets.DICK }}" -mhe=on VipFrame.7z .\VIP_Plugin\EVX\x64\Release\VipFrame59_vs.dll

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: VIP_PLUGIN
        path: VipFrame.7z
        retention-days: 1

  build_pyd:
    runs-on: windows-latest

    needs: check-env

    outputs:
      has_release: ${{ needs.check-env.outputs.has_release }}
      tag_name: ${{ needs.check-env.outputs.tag_name }}
      release_name: ${{ needs.check-env.outputs.release_name }}
      cores: ${{ needs.check-env.outputs.cores }}

    steps:
      - uses: actions/checkout@v5
        with:
          repository: JiaPai12138/Z-LoK-Stable
          token: ${{ secrets.LOK }}
          path: Z-LoK-Stable
          fetch-depth: 1
          show-progress: true

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Build & Strip
        working-directory: ${{ github.workspace }}\Z-LoK-Stable
        shell: cmd
        run: |
          copy /Y clang-cl.exe "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\Llvm\x64\bin\clang-cl.exe"
          copy /Y lld-link.exe "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\Llvm\x64\bin\lld-link.exe"

          pip install nuitka
          set CCFLAGS=-mllvm -sub -mllvm -split -mllvm -sobf -flto -LTCG /MD
          set LDFLAGS=/LTCG /OPT:REF /OPT:ICF /DEBUG:NONE
          python -m nuitka --clang --module --lto=no --quiet --show-progress --show-memory --nofollow-imports --remove-output z_lok.py

          set CCFLAGS=-mllvm -sub -mllvm -split -mllvm -sobf -mllvm -split_num=7 -flto -LTCG /MD
          python -m nuitka --clang --module --lto=no --quiet --show-progress --show-memory --nofollow-imports --remove-output z_lokor --include-package=z_lokor

          ren z_lok.cp312-win_amd64.pyd z_lok.pyd
          ren z_lokor.cp312-win_amd64.pyd z_lokor.pyd
          llvm-strip --strip-all z_lok.pyd
          llvm-strip --strip-all z_lokor.pyd

      - name: Compress & encrypt build with 7z
        run: |
          7z a -t7z -mmt -m0=LZMA2 -mx=3 -sccUTF-8 -ms=1g -mqs=on -p"${{ secrets.DICK }}" -mhe=on `
            loker.7z `
            ${{ github.workspace }}\Z-LoK-Stable\z_lok.pyd `
            ${{ github.workspace }}\Z-LoK-Stable\z_lokor.pyd

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: VIP_COLOR
          path: |
            loker.7z

  pack_all:
    runs-on: windows-latest

    needs: build_pyd

    steps:
      - uses: actions/checkout@v5

      - uses: actions/checkout@v5
        with:
          repository: JiaPai12138/LoK-Dependencies
          token: ${{ secrets.LOK }}
          path: LoK-Dependencies
          fetch-depth: 1
          show-progress: true

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'

      - name: Download artifact 1
        uses: actions/download-artifact@v6
        with:
          name: VIP_EXE
          path: ${{ github.workspace }}\LoK-Dependencies\Include

      - name: Download artifact 2
        uses: actions/download-artifact@v6
        with:
          name: VIP_MK
          path: ${{ github.workspace }}\LoK-Dependencies\Include

      - name: Download artifact 3
        uses: actions/download-artifact@v6
        with:
          name: VIP_COLOR
          path: ${{ github.workspace }}\LoK-Dependencies\Include

      - name: Pack Color
        working-directory: ${{ github.workspace }}\LoK-Dependencies
        run: |
          python color_pack.py

      - name: Unzip the .7z file 1
        run: |
          7z x ${{ github.workspace }}\LoK-Dependencies\Include\PyStarter.7z -p"${{ secrets.DICK }}" -o${{ github.workspace }}\LoK-Dependencies\Lib

      - name: Unzip the .7z file 2
        run: |
          7z x ${{ github.workspace }}\LoK-Dependencies\Include\MK_Helper.7z -p"${{ secrets.DICK }}" -o${{ github.workspace }}\LoK-Dependencies\Lib\site-packages

      - name: Unzip the .7z file 3
        run: |
          7z x ${{ github.workspace }}\LoK-Dependencies\Include\loker.7z -p"${{ secrets.DICK }}" -o${{ github.workspace }}\LoK-Dependencies\Lib\site-packages

      - name: Rename folder
        working-directory: ${{ github.workspace }}\LoK-Dependencies\
        run: |
          Rename-Item -Path "Lib" -NewName "z_lok"

      - name: Compress & encrypt dist with 7z
        run: |
          7z a -t7z -m0=LZMA2 -mmt=on -mx=3 -md=4m -mfb=32 -ms=1g `
            -mqs=on -sccUTF-8 -mtc=on -mta=on -mhe=on `
            -p"${{ secrets.DLOK }}" z_lok.7z `
            ${{ github.workspace }}\LoK-Dependencies\z_lok

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: Z_LOK
          path: |
            z_lok.7z

      - name: Release Packed
        uses: softprops/action-gh-release@v2
        if: ${{ needs.build_pyd.outputs.has_release }} == "true"
        with:
          tag_name: ${{ needs.build_pyd.outputs.tag_name }}
          name: ${{ needs.build_pyd.outputs.release_name }}
          draft: false
          prerelease: false
          files: z_lok.7z
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  clean_run:
    runs-on: ubuntu-latest

    needs: pack_all

    steps:
      - name: Get Previous Run ID
        id: prev
        run: |
          runs=$(curl -s -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/pixel_builds.yml/runs?per_page=3")

          ids=$(echo "$runs" | jq -r --arg self "${{ github.run_id }}" '
            .workflow_runs // [] | .[]?.id | tostring | select(. != $self)
          ')

          if [ -z "${ids}" ]; then
            echo "No other runs to delete."
            exit 0
          fi

          while IFS= read -r id; do
            [ -z "$id" ] && continue
            echo "Deleting run ${id} ..."
            code=$(curl -s -o /dev/null -w "%{http_code}" -L -X DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${id}")

            if [ "$code" = "204" ]; then
              echo "Deleted ${id}"
            else
              echo "Warning: deleting ${id} returned HTTP ${code}" >&2
            fi

          done <<< "${ids}"
