name: Builders

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check-env:
    runs-on: windows-latest

    outputs:
      has_release: ${{ steps.release.outputs.has_release }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      release_name: ${{ steps.release.outputs.release_name }}
      cores: ${{ steps.cpu.outputs.cores }}

    steps:
      - name: Get CPU core count (Windows)
        id: cpu
        shell: pwsh
        run: |
          $cores = (Get-CimInstance -ClassName Win32_Processor).NumberOfLogicalProcessors
          Write-Output "cores=$cores" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Get latest release info
        id: release
        shell: bash
        run: |
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest)

          echo "$response"

          if echo "$response" | grep -q "Not Found"; then
            echo "has_release=false" >> $GITHUB_OUTPUT
          else
            echo "has_release=true" >> $GITHUB_OUTPUT
            echo "tag_name=$(echo "$response" | jq -r .tag_name)" >> $GITHUB_OUTPUT
            echo "release_name=$(echo "$response" | jq -r .name)" >> $GITHUB_OUTPUT
          fi

  print-env:
    runs-on: ubuntu-latest

    needs: check-env

    steps:
      - name: Print release info
        run: |
          if [ "${{ needs.check-env.outputs.has_release }}" = "true" ]; then
            echo "✅ Latest release tag: ${{ needs.check-env.outputs.tag_name }}"
            echo "✅ Release name: ${{ needs.check-env.outputs.release_name }}"
            echo "✅ Num of cores: ${{ needs.check-env.outputs.cores }}"
          else
            echo "⚠️ No releases found."
          fi

  build_exe:
    runs-on: windows-latest

    needs: check-env

    steps:
    - uses: actions/checkout@v5
      with:
        repository: JiaPai12138/VIP_exe
        token: ${{ secrets.LOK }}
        path: VIP_exe
        fetch-depth: 1
        show-progress: true

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Build
      working-directory: ${{ github.workspace }}\VIP_exe
      shell: cmd
      run: |
        copy /Y clang-cl.exe "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\Llvm\x64\bin\clang-cl.exe"
        copy /Y lld-link.exe "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\Llvm\x64\bin\lld-link.exe"

        msbuild PyStarter.sln /p:Configuration=Release /p:Platform=x64 /p:CLToolExe=clang-cl.exe /p:CLToolPath=${{ github.workspace }}\VIP_exe /m /verbosity:quiet

    - name: Strip exe
      working-directory: ${{ github.workspace }}\VIP_exe
      run: llvm-strip --strip-all .\x64\Release\PyStarter.exe

    - name: Rename with random vocab
      working-directory: ${{ github.workspace }}\VIP_exe
      shell: pwsh
      run: |
        $vocabFile = "${{ github.workspace }}\VIP_exe\vocab.txt"
        $exePath = "${{ github.workspace }}\VIP_exe\x64\Release\PyStarter.exe"
        $word = Get-Content -LiteralPath $vocabFile | Get-Random -Count 1
        $dir = Split-Path $exePath
        $newPath = Join-Path $dir "$word.exe"
        Rename-Item -LiteralPath $exePath -NewName $newPath

    - name: Compress & encrypt build with 7z
      run: |
        7z a -t7z -mmt -m0=LZMA2 -mx=3 -sccUTF-8 -ms=1g -mqs=on -p"${{ secrets.DICK }}" -mhe=on PyStarter.7z .\VIP_exe\x64\Release\*.exe

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: PyStarter
        path: PyStarter.7z
